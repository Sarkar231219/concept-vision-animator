
// Follow this setup guide to integrate the Deno language server with your editor:
// https://deno.land/manual/getting_started/setup_your_environment
// This enables autocomplete, go to definition, etc.

import { serve } from "https://deno.land/std@0.177.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.43.2";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

interface AnimationRequest {
  id: string;
  title: string;
  description: string | null;
  education_level: string;
  language: string;
}

serve(async (req: Request) => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get("SUPABASE_URL") ?? "",
      Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") ?? ""
    );

    if (req.method === "POST") {
      const requestData: AnimationRequest = await req.json();

      // Validate the request data
      if (!requestData.id || !requestData.title || !requestData.education_level) {
        return new Response(
          JSON.stringify({ error: "Missing required fields" }),
          { 
            headers: { ...corsHeaders, "Content-Type": "application/json" }, 
            status: 400 
          }
        );
      }

      // In a real-world scenario, you'd call an external video generation service here
      // For now, we'll simulate processing time and provide a placeholder video
      
      console.log(`Processing animation request: ${requestData.id} - ${requestData.title}`);

      // Update the request status to processing
      await supabaseClient
        .from('animation_requests')
        .update({ status: 'processing' })
        .eq('id', requestData.id);

      // Simulate processing delay
      await new Promise(resolve => setTimeout(resolve, 5000));

      // Sample video URL - in a real app this would be generated by your video service
      const videoUrl = "https://player.vimeo.com/video/435127897";

      // Update the request with the completed status and video URL
      await supabaseClient
        .from('animation_requests')
        .update({
          status: 'completed',
          video_url: videoUrl,
          updated_at: new Date().toISOString()
        })
        .eq('id', requestData.id);

      return new Response(
        JSON.stringify({ success: true, message: "Animation generated successfully", videoUrl }),
        { 
          headers: { ...corsHeaders, "Content-Type": "application/json" }, 
          status: 200 
        }
      );
    }

    return new Response(
      JSON.stringify({ error: "Method not allowed" }),
      { 
        headers: { ...corsHeaders, "Content-Type": "application/json" }, 
        status: 405 
      }
    );
  } catch (error) {
    console.error("Error processing request:", error);
    
    return new Response(
      JSON.stringify({ error: "Internal server error" }),
      {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
        status: 500
      }
    );
  }
});
